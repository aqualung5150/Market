version: "3"

services:
  postgresql:
    container_name: postgresql
    image: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    volumes:
      - postgresql_volume:/var/lib/postgresql/data

  backend:
    build: ./backend
    container_name: backend
    image: backend
    depends_on:
      postgresql:
        condition: service_healthy
    restart: always
    env_file:
      - .env
    volumes:
      - uploads_volume:/app/uploads

  frontend:
    build: ./frontend
    container_name: frontend
    image: frontend
    depends_on:
      - backend
    restart: always

  nginx:
    build: ./nginx
    container_name: nginx
    image: nginx
    depends_on:
      - frontend
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - certbot_conf_volume:/etc/letsencrypt
      - certbot_www_volume:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  
  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - certbot_conf_volume:/etc/letsencrypt
      - certbot_www_volume:/var/www/certbot
      - certbot_volume:/var/lib/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgresql_volume:
    external: true

  uploads_volume:
    external: true

  certbot_volume:
    external: true

  certbot_conf_volume:
    name: certbot_conf_volume
    driver_opts:
      type: none
      device: ${PWD}/data/certbot/conf
      o: bind

  certbot_www_volume:
    name: certbot_www_volume
    driver_opts:
      type: none
      device: ${PWD}/data/certbot/www
      o: bind

