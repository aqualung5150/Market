// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma 가이드 - https://velog.io/@dnkim419/Prisma-schema.prisma-%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-model-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0
// 채팅 내역 db 예시 - https://medium.com/@mutationevent/mysql-schema-for-a-chat-application-7e0067dd04fd

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  nickname     String        @db.VarChar(12) //TODO @default('닉네임')
  email        String        @unique
  image        String         @default("default.png")
  createdAt    DateTime       @default(now())
  messages Message[]
  channels ChannelsOnUsers[]
}

model Channel {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  messages Message[]
  users ChannelsOnUsers[]
}

model Message {
  id Int @id @default(autoincrement())
  body String
  read Boolean @default(false)
  createdAt DateTime @default(now())
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  sender User @relation(fields: [senderId], references: [id])
  senderId Int
}

model ChannelsOnUsers {
  userId Int
  channelId Int
  user User @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@id([userId, channelId])
}